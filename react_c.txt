
Create an APP:
	npx create-react-app my-app
	
	npx create-react-app my-app --template typescript
	Using 
		npm create vite@latest
		project name : j2
		select 1 framework : React
react version
	npm view react version
start
	npm start
	npm run dev
Required Npms
	npm i react-router-dom
	npm i prop-types --save 
	npm i react-bootstrap bootstrap 
	npm i react-icons --save
	npm i axios 
	npm i --save react-toastify
	npm i crypto-js
	npm i react-cookie
	npm i --save react-spinners
	npm i react-loading-overlay-ts@1.0.5
	npm i --save react date-fns
	npm i --save react-date-range
	npm i react-error-boundary
	
	npm i json-server && npm i lodash
	
Kendo
	npm install --save @progress/kendo-react-editor @progress/kendo-react-intl @progress/kendo-react-buttons @progress/kendo-react-dropdowns @progress/kendo-react-dialogs @progress/kendo-react-inputs @progress/kendo-react-layout @progress/kendo-react-popup @progress/kendo-react-pdf @progress/kendo-react-progressbars @progress/kendo-drawing @progress/kendo-licensing @progress/kendo-svg-icons
	npm install --save @progress/kendo-theme-default
	import '@progress/kendo-theme-default/dist/all.css';
		add into app.js file
	npm i @progress/kendo-data-query
	npm i @progress/kendo-react-grid
	npm i --save @progress/kendo-licensing
ag grid
	npm i --save ag-grid-community ag-grid-react
	
	
How to activate
	npm install --save @progress/kendo-licensing
	npx kendo-ui-license activate
	
Create a directory
	mkdir components 
	mkdir components,pages
	
Create a file or  files
	copy nul > file.jsx
	
	copy nul > file.tsx && copy nul > files.tsx
	
delete a file	
	del file.jsx
	
	del *.tsx

Java script expersion	
	{`${step >= 1 ? 'active' : ''}`} 
	style={{ paddingLeft: "20px"}}
	
	
	protected route
	
	

  const [objBrand, setobjBrand] = useState<Brand | {}>({} as);
  
  
  https://www.youtube.com/watch?v=98JVaTcoexc&list=PLsZlhayVgqNwHNHeqpCkSgdRV08xrKtzW&index=6
  
  
  https://github.com/ag-grid/react-data-grid/tree/main/getting-started-video-tutorial
  
  
  https://github.com/vikas62081/agGrid/blob/quickFilter/src/App.js
  
  import { Injectable } from '@angular/core';
import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from '@angular/common/http';
import { Observable } from 'rxjs';
import { AuthenticationService } from '../_services/service/authentication.service';
@Injectable()
export class JwtInterceptor implements HttpInterceptor {
    constructor(private authenticationService: AuthenticationService) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        // add authorization header with jwt token if available
        let currentUser = this.authenticationService.currentUserValue;
        if (currentUser && currentUser.AuthToken) {
            request = request.clone({
                setHeaders: {
                    UserId: `${currentUser.UserId}`,
                    Token: `${currentUser.AuthToken}`,
                    'Accept': 'application/json;charset=utf-8'
                }
            });
        }

        return next.handle(request);
    }
}

import { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { retry, catchError } from 'rxjs/operators';
import { Injectable } from '@angular/core';
import { NgbModal } from '@ng-bootstrap/ng-bootstrap';
import { RkmodalComponent } from '../layout1/rkmodal/rkmodal.component';
import { Router } from '@angular/router';
@Injectable()
export class HttpErrorInterceptor implements HttpInterceptor {
    constructor(
        private modalService: NgbModal,
        private router: Router,) { }

    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {
        return next.handle(request).pipe(
            //retry(1),//
            catchError(err => {
                //Session error  
                if (this.router.url !== '/SI_PcExpGZbbArkBCN3mishikaUbkSIS4GFa3BFOg' && err.status === 401) {
                    this.modalService.dismissAll();
                    const modalRef = this.modalService.open(RkmodalComponent);
                    modalRef.componentInstance.my_modal_title = 'Your session expired.!';
                    modalRef.componentInstance.my_modal_content = 'Any confirmed transaction are saved.but you will need to restart any searches ' +
                        'or unfinished transactions.';
                }
                //bad reqest error
                else if (err.status === 400) {
                    const modalRef = this.modalService.open(RkmodalComponent);
                    modalRef.componentInstance.my_modal_title = 'Information!';
                    modalRef.componentInstance.my_modal_content = `Something went wrong.  Please try again after somettimes.! ` +
                        `\n Error Code: ${err.status} \r\n Message: ${err.message}`;
                }
                const error = err.error || err.statusText;
                return throwError(error);
            }))
    }
}

    { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: HttpErrorInterceptor, multi: true },
