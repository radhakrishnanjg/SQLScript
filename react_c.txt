
Create an APP:
	npx create-react-app my-app
	
	npx create-react-app my-app --template typescript
	Using 
		npm create vite@latest
		project name : j2
		select 1 framework : React
react version
	npm view react version
start
	npm start
	npm run dev
Required Npms
	npm i react-router-dom
	npm i prop-types --save 
	npm i react-bootstrap bootstrap 
	npm i react-icons --save
	npm i axios 
	npm i --save react-toastify
	npm i crypto-js
	npm i react-cookie
	npm i --save react-spinners
	npm i react-loading-overlay-ts@1.0.5
	npm i --save react date-fns
	npm i --save react-date-range
	npm i react-error-boundary
	
	npm i json-server && npm i lodash
	
Kendo
	npm install --save @progress/kendo-react-editor @progress/kendo-react-intl @progress/kendo-react-buttons @progress/kendo-react-dropdowns @progress/kendo-react-dialogs @progress/kendo-react-inputs @progress/kendo-react-layout @progress/kendo-react-popup @progress/kendo-react-pdf @progress/kendo-react-progressbars @progress/kendo-drawing @progress/kendo-licensing @progress/kendo-svg-icons
	npm install --save @progress/kendo-theme-default
	import '@progress/kendo-theme-default/dist/all.css';
		add into app.js file
	npm i @progress/kendo-data-query
	npm i @progress/kendo-react-grid
	npm i --save @progress/kendo-licensing
ag grid
	npm i --save ag-grid-community ag-grid-react
	
	
How to activate
	npm install --save @progress/kendo-licensing
	npx kendo-ui-license activate
	
Create a directory
	mkdir components 
	mkdir components,pages
	
Create a file or  files
	copy nul > file.jsx
	
	copy nul > file.tsx && copy nul > files.tsx
	
delete a file	
	del file.jsx
	
	del *.tsx

Java script expersion	
	{`${step >= 1 ? 'active' : ''}`} 
	style={{ paddingLeft: "20px"}}
	
	
	protected route
	
	

  const [objBrand, setobjBrand] = useState<Brand | {}>({} as);
  
  
  https://www.youtube.com/watch?v=98JVaTcoexc&list=PLsZlhayVgqNwHNHeqpCkSgdRV08xrKtzW&index=6
  
  
  https://github.com/ag-grid/react-data-grid/tree/main/getting-started-video-tutorial
  
  
  https://github.com/vikas62081/agGrid/blob/quickFilter/src/App.js

// File: MyDynamicForm.js
import React, { useState, useEffect } from "react";
import Form from "@rjsf/core";

// Step 1: Initial static schema
const baseSchema = {
  type: "object",
  properties: {
    country: {
      type: "string",
      title: "Country",
      enum: ["IN", "US"],
      enumNames: ["India", "United States"]
    },
    state: {
      type: "string",
      title: "State"
    },
    branch: {
      type: "string",
      title: "Branch",
      enum: ["IND", "USA"],
      enumNames: ["India Branch", "US Branch"]
    },
    currency: {
      type: "string",
      title: "Currency",
      enum: ["INR", "USD"]
    },
    settlement: {
      type: "string",
      title: "Settlement Mode"
    }
  }
};

// Step 2: uiSchema with dependsOn metadata
const uiSchema = {
  state: {
    "ui:options": {
      dependsOn: "country"
    }
  },
  settlement: {
    "ui:options": {
      dependsOn: ["branch", "currency"]
    }
  }
};

function MyDynamicForm() {
  const [formData, setFormData] = useState({});
  const [schema, setSchema] = useState(baseSchema);

  // Step 3: Fetch logic inside useEffect
  useEffect(() => {
    const newSchema = JSON.parse(JSON.stringify(baseSchema));

    const fetchStateOptions = async () => {
      if (formData.country) {
        const res = await fetch(`/api/lookups?category=state&parent1=${formData.country}`);
        const options = await res.json();
        newSchema.properties.state.enum = options.map(o => o.name);
        newSchema.properties.state.enumNames = options.map(o => o.description);
      }
    };

    const fetchSettlementOptions = async () => {
      if (formData.branch && formData.currency) {
        const res = await fetch(
          `/api/lookups?category=settlement&parent1=${formData.branch}&parent2=${formData.currency}`
        );
        const options = await res.json();
        newSchema.properties.settlement.enum = options.map(o => o.name);
        newSchema.properties.settlement.enumNames = options.map(o => o.description);
      }
    };

    Promise.all([fetchStateOptions(), fetchSettlementOptions()]).then(() => {
      setSchema(newSchema);
    });
  }, [formData.country, formData.branch, formData.currency]);

  const handleChange = ({ formData }) => {
    setFormData(formData);
  };

  return (
    <Form
      schema={schema}
      uiSchema={uiSchema}
      formData={formData}
      onChange={handleChange}
      onSubmit={({ formData }) => console.log("Submitted:", formData)}
    />
  );
}

export default MyDynamicForm;

