
Link  : https://www.youtube.com/watch?v=LMFAaNWmKII&list=PL_euSNU_eLbfuahgrm63xLCWfpl2MaTAr

https://create-react-app.dev/docs/getting-started/


States
	UseStates
	UseReducer
	Context API
	 
Need to understand
	Context API
	Layout 
	Spinner 
	Protected Routes
	Redux
	Notification or toaster message one page to another page.
	How to prevent home page into login on browser back button
	Interceptor for token and other stuffs like spinner,or something
	Error Boundary for services file and components
	multiple Interceptor for error handling, session expired with request and response level
	

UseRef
	
useParams	
	The useParams hook returns an object of key/value pairs of the dynamic params from the current URL 
	that were matched by the <Route path>
	
useSearchParams 
	used to read and modify the query string in the URL for the current location
	
useNavigation 
	tells you everything you need to know about a page navigation to build pending navigation indicators 
	and optimistic UI on data mutations. 
Hooks
useState
	The React useState Hook allows us to track state in a function component. 
	State generally refers to data or properties that need to be tracking in an application. 

useContext 
	React Context is a way to manage state globally.
	It can be used together with the useState Hook to share state between deeply nested components more 
	easily than with useState alone.
	
useReducer
	The useReducer Hook is similar to the useState Hook.
	It allows for custom state logic. 
	If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.

useEffect
	The useEffect Hook allows you to perform side effects in your components.
	Some examples of side effects are: fetching data, directly updating the DOM, and timers.
	
useRef

useCallback

useMemo

useTransition

useDeferredValue
 

Here‚Äôs a tabular summary of all common validation rules supported by RJSF via JSON Schema (especially with @rjsf/validator-ajv8) for different data types.


---

üìã JSON Schema Validation Rules Table (used by RJSF)

Data Type	JSON Schema Keyword	Description	Example

Common	title	Field label	"title": "Email"
	description	Help text shown below the field	"description": "Enter your email"
	default	Default value	"default": "test@example.com"
String	minLength	Minimum number of characters	"minLength": 6
	maxLength	Maximum number of characters	"maxLength": 20
	pattern	Regex pattern to match	"pattern": "^[a-zA-Z]+$"
	format	Predefined formats: email, uri, date, date-time, etc.	"format": "email"
Number	minimum	Minimum value	"minimum": 1
	maximum	Maximum value	"maximum": 100
	exclusiveMinimum	Must be strictly greater than	"exclusiveMinimum": 5
	exclusiveMaximum	Must be strictly less than	"exclusiveMaximum": 50
	multipleOf	Must be a multiple of the specified value	"multipleOf": 5
Array	minItems	Minimum number of array items	"minItems": 1
	maxItems	Maximum number of array items	"maxItems": 5
	uniqueItems	Enforces all items to be unique	"uniqueItems": true
Object	required	Required fields inside an object	"required": ["name"]
	properties	Defines the fields of the object	See schema structure
	dependencies	Conditional fields based on others	See advanced schema
Enum	enum	Restrict value to a fixed set	"enum": ["Red", "Green"]
Boolean	(no special rules)	Just set "type": "boolean"	



---

üõ°Ô∏è Advanced & Custom Validations

Feature	Description	How to Use

const	Force exact value	"const": "admin"
oneOf, anyOf, allOf	Schema combinations for conditional logic	Advanced schema logic
validate()	Custom JavaScript validation logic	Pass via <Form validate={fn} />
transformErrors()	Customize error messages	Pass via <Form transformErrors={fn} />
if, then, else	Conditional schemas (JSON Schema Draft 7+)	"if": {...}, "then": {...}



---

Would you like this exported as a downloadable Excel or CSV file for documentation or development reference?


<div class="row">
  <div class="col-sm-6 col-lg-6">
    <h3>
      Masters Upload
    </h3>
  </div>
  <div class="col-sm-6 col-lg-6">
    <div class="pull-right hidden-xs">
      <ol class="breadcrumb" id="dynamicbreadcrumb">
        <li>
           <span>Upload</span>
        </li>
        <li>
           <span> Masters</span>
        </li>
        <li class="active">
          
          Upload
        </li>
      </ol>
    </div>
  </div>
</div>
<div class="panel panel-default">
  <div class="panel-heading">
    <div class="row">
      <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8">
        <span class="groupspanheader">
          Upload
        </span>
      </div>
      <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4 ">
        <div class="pull-right">
          <button type="button" class="btn btn-primary" routerLinkActive="active" routerLink="/MasterUploadList">Back</button>
        </div>
      </div>
    </div>
  </div>
  <form   [formGroup]="MasterUploadForm" (ngSubmit)="uploadFiles()" class="form-horizontal">
    <div class="panel-body">
      <div class="row">
        <div class="col-sm-7">
          <b>General Instructions :</b><br />
          <ul class="list-group">
            <li class="list-group-item">Change the Sheet name as "Sheet1"</li>
            <li class="list-group-item">Don't add any extra columns to the RAW file.</li>
            <li class="list-group-item">Convert the format of all the Numeric values to Number with two decimal
              values and then again change the format as TEXT, &nbsp; remove commas in between.</li>
            <li class="list-group-item">Delete any extra blank columns if any till end.</li>
            <li class="list-group-item">Delete any extra Blank Rows if any till end.</li>
            <li class="list-group-item">Remove any characters (like -) in numeric columns, Make it blank or ZERO.</li>
          </ul>
        </div>
        <div class="col-sm-5">

          <div class="form-group" [ngClass]="{'has-error': formErrors.FileType}">
            <label class="col-sm-3  control-label" for="FileType">File Type <span class="mandantory">*</span></label>
            <div class="col-md-9">

              <div class="input-group">
                <select id="FileType" class="form-control" formControlName="FileType" (blur)="logValidationErrors()">
                  <option value="" selected="selected">Select</option>
                  <option *ngFor="let c1 of lstmasterscreens" value={{c1.DropdownValue}}>
                    {{c1.DropDownDescription}}
                  </option>
                </select>
                <span class="input-group-addon" style="cursor: pointer" (click)="onDownloadTemplate()">
                  <span class="fa fa-download"></span>
                </span>
              </div>
              <div class="help-block-rk">
                <span class="help-block" *ngIf="formErrors.FileType">
                  {{formErrors.FileType}}
                </span>
              </div>
            </div>
          </div>


          <div class="form-group" [ngClass]="{'has-error': formErrors.FileData}">
            <label class="col-sm-3 control-label" for="SelectSelect">File <span class="mandantory">*</span> </label>
            <div class="col-md-9">
              <input type="file" id="file" (change)="onFileChanged($event)"
                accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" formControlName="FileData">
              <div class="help-block-rk">
                <span class="help-block" *ngIf="formErrors.FileData">
                  {{formErrors.FileData}}
                </span>
              </div>
            </div>

          </div>


          <div class="form-group" [ngClass]="{'has-error': formErrors.Remarks}">
            <label class="col-sm-3 control-label" for="Remarks">Remarks <span class="mandantory">*</span></label>
            <div class="col-sm-9">
              <input id="Remarks" type="text" class="form-control" formControlName="Remarks"
                (blur)="logValidationErrors()" maxlength="500">
              <span class="help-block" *ngIf="formErrors.Remarks">
                {{formErrors.Remarks}}
              </span>
            </div>
          </div>
          
        </div>
      </div>
    </div>
    <div class="panel-footer">
      <div class="pull-right btn-toolbar">
        <button class="btn btn-primary" routerLinkActive="active" routerLink="/MasterUploadList">Cancel</button>
        <button type="submit" prevent-double-submit [disabled]="MasterUploadForm.invalid"
          class="btn btn-success">Upload</button>
      </div>
      <div class="clearfix"></div>
    </div>
  </form>
</div>

 lstmasterscreens: Dropdown[];
  MasterUploadForm: FormGroup;
  uploaddata: MasterUpload = {} as any;
  selectedFile: File;
  kycFiles_Ext = Apisettings.KYCFiles_Ext;
  kycFiles_Fileszie = Apisettings.KYCFiles_Fileszie;
  $: any;
  constructor(
    private router: Router,
    private fb: FormBuilder,
    public _masteruploadService: MasteruploadService,
    public _alertService: ToastrService,
 
    private _UserService: UserService,
    private _authorizationGuard: AuthorizationGuard
  ) {
  }

  formErrors = {
    'FileType': '',
    'FileData': '',
    'Remarks': '',
  };

  validationMessages = {
    'FileType': {
      'required': 'This Field is required.',
    },
    'Remarks': {
      'required': 'This Field is required.',
      'minlength': 'This Field must be greater than 3 characters.',
      'maxlength': 'This Field must be less than 500 characters.'
    },
    'FileData': {
      'required': 'This Field is required.',
    },
  };

  logValidationErrors(group: FormGroup = this.MasterUploadForm): void {
    Object.keys(group.controls).forEach((key: string) => {
      const abstractControl = group.get(key);
      if (abstractControl && abstractControl.value && abstractControl.value.length > 0 && !abstractControl.value.replace(/^\s+|\s+$/gm, '').length) {
        abstractControl.setValue('');
      }
      this.formErrors[key] = '';
      if (abstractControl && !abstractControl.valid &&
        (abstractControl.touched || abstractControl.dirty)) {
        const messages = this.validationMessages[key];
        for (const errorKey in abstractControl.errors) {
          if (errorKey) {
            this.formErrors[key] += messages[errorKey] + ' ';
          }
        }
      }
      if (abstractControl instanceof FormGroup) {
        this.logValidationErrors(abstractControl);
      }
    });
  }

  ngOnInit() {
    //
    this._UserService.getUserMasterUploadScreens()
      .subscribe(
        (data: Dropdown[]) => {
          this.lstmasterscreens = data.filter(a => a.IsReportingServer != true);

        },
        (err: any) => {
          //
          console.log(err)
        }
      );

    this.MasterUploadForm = this.fb.group({
      FileType: ['', [Validators.required]],
      Remarks: ['', [Validators.required,]],
      FileData: ['', [Validators.required]],
    });
  }
  onLoad() {
  }
  onFileChanged(e: any) {
    this.selectedFile = e.target.files[0];
  }

  onDownloadTemplate() {

    let filetype = this.MasterUploadForm.controls['FileType'].value;
    if (filetype != "") {
      //
      this._masteruploadService.getFileTemplate(filetype)
        .subscribe(data => {

          saveAs(data, filetype + '.xlsx')
        },
          (err) => {
            //
            console.log(err);
          }
        );
    } else {
      this._alertService.error("Please select file type.!");
    }
  }

  uploadFiles() {
    if (this._authorizationGuard.CheckAcess("MasterUploadList", "ViewEdit")) {
      return;
    }
    if (this.MasterUploadForm.invalid) {
      return;
    }
    var filesizeMB = Math.round(this.selectedFile.size / 1024 / 1024);
    var fileexte = this.selectedFile.name.split('.').pop();
    var allowedmb = parseInt(Apisettings.KYCFiles_Fileszie.toString())
    if (!this.isInArray(Apisettings.KYCFiles_Ext, fileexte)) {
      this._alertService.error("File must be extension with " + Apisettings.KYCFiles_Ext);
      return;
    }
    else if (filesizeMB > allowedmb) {
      this._alertService.error("File size must be less than or equal to " + Apisettings.KYCFiles_Fileszie + " MB");
      return;
    }
    this.uploaddata.FileType = this.MasterUploadForm.controls['FileType'].value;
    this.uploaddata.Remarks = this.MasterUploadForm.controls['Remarks'].value;
    //
    this._masteruploadService.save(this.selectedFile, this.uploaddata.Remarks, this.uploaddata.FileType).subscribe(
      (data) => {
        if (data.Flag) {
          this._alertService.success(data.Msg);
          this.router.navigate(['/MasterUploadList']);
        }
        else {
          this._alertService.error(data.Msg);
          this.router.navigate(['/MasterUploadList']);
        }
        //
      },
      (error: any) => {
        //
      }
    );

  }

  isInArray(array, word) {
    return array.indexOf(word.toLowerCase()) > -1;
  }


