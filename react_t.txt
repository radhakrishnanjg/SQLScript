
Link  : https://www.youtube.com/watch?v=LMFAaNWmKII&list=PL_euSNU_eLbfuahgrm63xLCWfpl2MaTAr

https://create-react-app.dev/docs/getting-started/


States
	UseStates
	UseReducer
	Context API
	 
Need to understand
	Context API
	Layout 
	Spinner 
	Protected Routes
	Redux
	Notification or toaster message one page to another page.
	How to prevent home page into login on browser back button
	Interceptor for token and other stuffs like spinner,or something
	Error Boundary for services file and components
	multiple Interceptor for error handling, session expired with request and response level
	

UseRef
	
useParams	
	The useParams hook returns an object of key/value pairs of the dynamic params from the current URL 
	that were matched by the <Route path>
	
useSearchParams 
	used to read and modify the query string in the URL for the current location
	
useNavigation 
	tells you everything you need to know about a page navigation to build pending navigation indicators 
	and optimistic UI on data mutations. 
Hooks
useState
	The React useState Hook allows us to track state in a function component. 
	State generally refers to data or properties that need to be tracking in an application. 

useContext 
	React Context is a way to manage state globally.
	It can be used together with the useState Hook to share state between deeply nested components more 
	easily than with useState alone.
	
useReducer
	The useReducer Hook is similar to the useState Hook.
	It allows for custom state logic. 
	If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.

useEffect
	The useEffect Hook allows you to perform side effects in your components.
	Some examples of side effects are: fetching data, directly updating the DOM, and timers.
	
useRef

useCallback

useMemo

useTransition

useDeferredValue
 

Hereâ€™s a tabular summary of all common validation rules supported by RJSF via JSON Schema (especially with @rjsf/validator-ajv8) for different data types.


---

ðŸ“‹ JSON Schema Validation Rules Table (used by RJSF)

Data Type	JSON Schema Keyword	Description	Example

Common	title	Field label	"title": "Email"
	description	Help text shown below the field	"description": "Enter your email"
	default	Default value	"default": "test@example.com"
String	minLength	Minimum number of characters	"minLength": 6
	maxLength	Maximum number of characters	"maxLength": 20
	pattern	Regex pattern to match	"pattern": "^[a-zA-Z]+$"
	format	Predefined formats: email, uri, date, date-time, etc.	"format": "email"
Number	minimum	Minimum value	"minimum": 1
	maximum	Maximum value	"maximum": 100
	exclusiveMinimum	Must be strictly greater than	"exclusiveMinimum": 5
	exclusiveMaximum	Must be strictly less than	"exclusiveMaximum": 50
	multipleOf	Must be a multiple of the specified value	"multipleOf": 5
Array	minItems	Minimum number of array items	"minItems": 1
	maxItems	Maximum number of array items	"maxItems": 5
	uniqueItems	Enforces all items to be unique	"uniqueItems": true
Object	required	Required fields inside an object	"required": ["name"]
	properties	Defines the fields of the object	See schema structure
	dependencies	Conditional fields based on others	See advanced schema
Enum	enum	Restrict value to a fixed set	"enum": ["Red", "Green"]
Boolean	(no special rules)	Just set "type": "boolean"	


 .help-block
{
  margin:0px;
  padding:0px;  
  color:#CC4141;
  font-size: 11px;
  line-height: 12px;
}

