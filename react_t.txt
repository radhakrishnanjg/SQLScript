
Link  : https://www.youtube.com/watch?v=LMFAaNWmKII&list=PL_euSNU_eLbfuahgrm63xLCWfpl2MaTAr

https://create-react-app.dev/docs/getting-started/


States
	UseStates
	UseReducer
	Context API
	 
Need to understand
	Context API
	Layout 
	Spinner 
	Protected Routes
	Redux
	Notification or toaster message one page to another page.
	How to prevent home page into login on browser back button
	Interceptor for token and other stuffs like spinner,or something
	Error Boundary for services file and components
	multiple Interceptor for error handling, session expired with request and response level
	

UseRef
	
useParams	
	The useParams hook returns an object of key/value pairs of the dynamic params from the current URL 
	that were matched by the <Route path>
	
useSearchParams 
	used to read and modify the query string in the URL for the current location
	
useNavigation 
	tells you everything you need to know about a page navigation to build pending navigation indicators 
	and optimistic UI on data mutations. 
Hooks
useState
	The React useState Hook allows us to track state in a function component. 
	State generally refers to data or properties that need to be tracking in an application. 

useContext 
	React Context is a way to manage state globally.
	It can be used together with the useState Hook to share state between deeply nested components more 
	easily than with useState alone.
	
useReducer
	The useReducer Hook is similar to the useState Hook.
	It allows for custom state logic. 
	If you find yourself keeping track of multiple pieces of state that rely on complex logic, useReducer may be useful.

useEffect
	The useEffect Hook allows you to perform side effects in your components.
	Some examples of side effects are: fetching data, directly updating the DOM, and timers.
	
useRef

useCallback

useMemo

useTransition

useDeferredValue

Slide 1: Title Slide
Title: MS SQL Server JSON
Subtitle: Leveraging JSON Data in SQL
Your Name & Date

Slide 2: Agenda
Introduction to MS SQL Server and JSON
Storing JSON in MS SQL Server
Querying JSON Data in SQL Server
JSON Functions in MS SQL
Real-World Use Cases
Demo (Optional)
Best Practices
Q&A


Slide 3: MS SQL Server JSON Support and Compatibility
Introduced in SQL Server 2016:

JSON functions and features were first introduced in MS SQL Server 2016.
Supported in all later versions: SQL Server 2017, 2019, and beyond.
Native JSON Support:

MS SQL Server supports storing, querying, and manipulating JSON data.
JSON is stored as text (NVARCHAR) but treated like a native type using SQL Server functions.
No Dedicated JSON Data Type:

Unlike some NoSQL databases, SQL Server doesn’t have a specific JSON data type. JSON is stored as standard text (NVARCHAR), but specific functions enable powerful JSON querying.
Compatibility:

Works with most JSON formats.
Supports parsing, extracting, and validating JSON documents.
Compatible with client-server applications and web-based APIs where JSON is commonly used as a data interchange format.

Slide 4: What is JSON?
JSON (JavaScript Object Notation) is a lightweight data format used for data interchange.
Text-based format, easy to read and write.
Commonly used in web development to exchange data between servers and clients.
Slide 5: JSON Data Structure
JSON is made up of key-value pairs.
json
Copy code
{
    "id": 1,
    "name": "John",
    "age": 30,
    "skills": ["SQL", "JSON", "C#"]
}
Supports nested objects and arrays for complex data structures.

Slide 6: Why Use JSON in SQL Server?
Flexibility: Store semi-structured or dynamic data alongside relational data.
Compatibility: JSON is widely supported in modern applications.
Schema-less: Avoids rigid schemas; easy to store changing or unknown attributes.
Slide 7: Storing JSON in SQL Server
MS SQL Server allows storing JSON in NVARCHAR columns.
There is no dedicated JSON data type, but you can store JSON as text and work with it using built-in JSON functions.
Example:

sql
Copy code
CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductDetails NVARCHAR(MAX)
);

Insert JSON data: 
INSERT INTO Products (ProductID, ProductDetails)
VALUES (1, '{"name": "Laptop", "brand": "XYZ", "price": 1200}');

Slide 8: Querying JSON Data in SQL Server
MS SQL Server provides functions to extract and query JSON data.

Extracting JSON Data:

SELECT JSON_VALUE(ProductDetails, '$.name') AS ProductName
FROM Products;



Use JSON_VALUE() to extract scalar values.
Use JSON_QUERY() to extract objects or arrays.

Slide 9: JSON Functions in MS SQL Server
JSON_VALUE(): Extracts a scalar value from a JSON string.
JSON_QUERY(): Extracts JSON objects or arrays.
OPENJSON(): Parses JSON text and returns objects as rows and columns.
ISJSON(): Validates if a string is properly formatted as JSON.

Example using OPENJSON(): 

DECLARE @json NVARCHAR(MAX);
SET @json='{ "name": "John", "IsActive": true, "age": 45, "skills": [ "SQL", "C#", "MVC" ], "UGDegree": {"CollegeName" : "AJ", "Address" : "TN, 600028"}}';

SELECT *
FROM OPENJSON(@json);

_ need to copy the SQL data table

Table Structure Explanation
Key	Value	Type	Explanation
name	"John"	1	String: Enclosed in double quotes, representing textual data.
IsActive	true	3	Boolean: Logical value indicating true or false.
age	45	2	Integer: Numeric value without quotes, representing a number.
skills	[ "SQL", "C#", "MVC" ]	4	Array: A collection of values enclosed in square brackets.
UGDegree	{ "CollegeName" : "AJ", "Address" : "TN, 600028" }	5	Object: Key-value pairs enclosed in curly braces.

Slide 10: Modifying JSON Data in SQL Server
Use JSON_MODIFY() to update JSON data.
Example:
 
UPDATE Products
SET ProductDetails = JSON_MODIFY(ProductDetails, '$.price', 1500)
WHERE ProductID = 1;

select * from Products

This updates the price in the ProductDetails JSON document for the specific product.

Slide 11: Use Cases for JSON in SQL Server

Storing User Preferences: Dynamic user preferences stored in JSON format.
Product Specifications: Different products with varying specifications (attributes) stored in a JSON field.
Audit Logs: Flexible log storage for events with different data structures.
API Data: Easily store and query JSON responses from external APIs.

Slide 12: Demo  
Title: Live Demo of JSON in SQL Server
Demonstrate inserting JSON data, querying with JSON_VALUE(), and modifying with JSON_MODIFY().

Slide 13: Performance Considerations
Indexing: You can’t directly index JSON fields, but you can create computed columns to extract values from JSON and index those columns.
Example:

CREATE INDEX IX_ProductName
ON Products (JSON_VALUE(ProductDetails, '$.name'));
JSON Storage: Use appropriate data types (e.g., NVARCHAR(MAX)) for JSON storage, but be mindful of performance for very large JSON documents.

Slide 14: Best Practices

Validate JSON data using ISJSON() before inserting.
Avoid storing large, complex JSON objects. Split large JSON data across multiple fields or tables if necessary.
Use computed columns for indexing frequently accessed JSON properties.
Use OPENJSON() with explicit schemas to improve performance.
Slide 15: Conclusion and Q&A
MS SQL Server’s support for JSON bridges structured and semi-structured data.
JSON functions allow seamless querying and manipulation within SQL.
Best practices ensure performance and maintainability.
Open for questions and discussions.
